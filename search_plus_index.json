{"./":{"url":"./","title":"Flutter介绍","keywords":"","body":"Flutter是什么？ Flutter是谷歌的移动UI框架，可以快速构建高质量的iOS、Android原生界面，并支持发布到web 浏览器端。 Flutter是一款移动应用程序SDK，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。 Flutter包括一个现代的响应式框架、一个2D渲染引擎、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。 核心原则 一切皆为widget Widget是Flutter应用程序用户界面的基本构建块。每个Widget都是用户界面一部分的不可变声明。 与其他将视图、控制器、布局和其他属性分离的框架不同，Flutter具有一致的统一对象模型：widget。 Widget本身通常由许多更小的、单一用途widget组成，这些widget通过组合、嵌套的方式组合起来产生强大的效果。例如：Container是一个常用的widget， 由多个widget组成，这些widget负责布局、绘制、定位和调整大小。 widget分类: 基础容器widget 布局widget 装饰widget 分层的框架 Flutter框架是一个分层的结构，每个层都建立在前一层之上。 Engine为Framework提供了完整的运行环境。 Foundation层由dart:ui实现。 dart:ui提供了Framework能够运行的最基础功能，比如绘图，界面刷新，触屏，鼠标等事件的原始信息等。 Rendering层由几个子模块组成：Animation, Painting, Gestures. 在这一层，Flutter提供RenderObject，实现完整的布局，绘制功能。 Widgets层是开发者最常接触到的一层。 Widget是对RenderObject的封装。在Widget层，Flutter实现了响应式开发框架。 Material+Cupertino层，在这一层，Flutter提供了一系列的Widget，其中Material Widget实现了Material Design。Cupertino提供了一系列的iOS-Style的控件。 关于Framework各层级是如何定义的，可以参考这篇文章：https://zhuanlan.zhihu.com/p/59478546 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup.html":{"url":"setup.html","title":"Dart web前端学习笔记","keywords":"","body":"Dart web前端学习笔记 Dart编程语言可以对照web前端所熟习的Node编程语言。 Dart的包管理用的是pub； 它被用于web、服务器、移动应用、和物联网等领域的开发； Dart是面向对象的、类定义的、单继承的语言； Dart语法与Javascript还是很像的。比javascript语法要严谨一些，如,dart是强类型语类，但在一些情况可以弱类型、条件判断的语法上更严谨等； 以下是我对比javascript语法的区别，罗列了9点开发中常用到基础内容，如果有javascipt基础，上手开发基本上没有太大的问题； 想看更多详细内容请阅读： dart官网(中文)：https://dart.cn/tools/webdev 收集的比较简洁易性的教程：https://www.yiibai.com/dart/dart_programming_libraries.html Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/mei-ge-ying-yong-du-you-yi-ge-main-ding-ceng-han-shu.html":{"url":"setup/mei-ge-ying-yong-du-you-yi-ge-main-ding-ceng-han-shu.html","title":"每个应用都有一个 main() 顶层函数","keywords":"","body":"每个应用都有一个 main() 顶层函数 main() { print('Hello, World!'); //打印操作,类似于javascript的console.log } ... //在终端执行dart test.dart将自动进入main函数 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/dao-ru-qi-ta-dart-wen-jian.html":{"url":"setup/dao-ru-qi-ta-dart-wen-jian.html","title":"导入其它dart文件","keywords":"","body":"导入其它dart文件 // 导入核心库 import 'dart:math'; // 从外部 Package 中导入库 import 'package:test/test.dart'; // 导入文件 import 'path/to/my_other_file.dart' as myOtherFile; //myOtherFile.getValue(); Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/bian-liang-de-ding-yi.html":{"url":"setup/bian-liang-de-ding-yi.html","title":"变量的定义","keywords":"","body":"变量的定义 众所周知，JavaScript 是一门弱类型的语言，而 Dart 是强类型的语言。但dart也支持一些弱类型，Dart 中弱类型有var, Object 以及dynamic 大家在学习dart的过程中，可能有疑问：同为弱类型，var, object以及dynamic有什么区别？ var 初始可定义, 如果有初始值，那么其类型将会被锁定，定义之后不可改变类型 Object 动态任意类型，编译阶段检查类型 dynamic 动态任意类型，编译阶段不检查类型 /*字符串类型*/ var string = 'Hello, World!'; String string = 'Hello, World!'; /*数值类型*/ var number = 5; num number = 5; int number = 5; double doubleNumber = 5.0 /*Map类型*/ var map = {'a': 1}; // {a: 1} Map map = {'a': 1}; // {a: 1} Map map = Map(); map['a'] = 1; // {a: 1} /*List类型*/ var list = [1,1,1]; // [1,1,1] List list = [1,1,1]; // [1,1,1] List list = List(); list.add(1); list.add(1); list.add(1); // [1,1,1] /*dynamic类型与Object的区别*/ dynamic i = 9; int j=i+8; print(a); // 17 Object i=9; int j=i+8; print(j); //报错，抛出异常 final 与const关键字： final与const类似于javascript中的const，但dart中的const比final更严谨,请看下面代码 /*需要确定的值*/ final d1 = DateTime.now();//正确，运行时有确定的值 const d2 = DateTime.now();//报错，抛出异常; 需要编译时有确定的值 /*const的不可变性是可传递的，final不是*/ final List a1 = [11, 22, 33]; a1[1] = 44; //设置成功: [11, 44, 33] const List a2 = [11, 22, 33]; a2[1] = 44; //报错，抛出异常 /*值相同时final在内存中重复创建，const会引用相同值*/ final a1 = [11 , 22]; final a2 = [11 , 22]; print(identical(a1, a2));//false const b1 = [11 , 22]; const b2 = [11 , 22]; print(identical(b1, b2));//true Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/lei-xing-pan-duan-yu-bool-zhi-pan-duan.html":{"url":"setup/lei-xing-pan-duan-yu-bool-zhi-pan-duan.html","title":"类型判断与bool值判断","keywords":"","body":"类型判断与bool值判断 /*类型的判断*/ var a = 123; print(a is dynamic); // true assert(a is Object); // true /*if语句的判断*/ List list = [1,1,1]; if(list.length) { //报错，抛出异常; 在dart中不会自动转换bool值。 print(list); } if(list.length > 1) { //正确 print(list); } Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/mapde-cao-zuo.html":{"url":"setup/mapde-cao-zuo.html","title":"Map的操作","keywords":"","body":"Map的操作 Map user = {'name': 'XiaoHong', 'age': 23}; print(user['name']); // XiaoHong /*增加*/ user.addAll({'adress': '杭州'}); print(user); // {name: XiaoHong, age: 23, adress: 杭州} print(user.length); // 3 print(user.keys.toList()); //[name, age, adress] print(user.values.toList()); //[XiaoHong, 23, 杭州] /*遍利*/ user.forEach((key, value) { print('key=$key value=$value'); // key=name value=XiaoHong // key=age value=23 // key=adress value=杭州 }); /*删除*/ user.remove('name'); print(user); // {age: 23, adress: 杭州} user.clear(); print(user); // {} print(user.isEmpty); // true /*更新*/ user['name'] = 'WangHong'; print(user); //{name: WangHong} 与javascript对比，键值必须引号括起来、取、增、删的方式有一些小变化。 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/listde-cao-zuo.html":{"url":"setup/listde-cao-zuo.html","title":"List的操作","keywords":"","body":"List的操作 List list = ['a', 'b']; print(list[0]); // a /*增加*/ list.add('c'); print(list); // [a, b, c] print(list.first); // a print(list.last); // c print(list.reversed.toList()); // [c, b, a] list.addAll(['d', 'e']); print(list); // [a, b, c, d, e] list.insert(1, '-'); print(list); // [a, -, b, c, d, e] list.insertAll(0, ['w', 'w']); print(list); // [w, w, a, -, b, c, d, e] /*删除*/ list.remove('w'); print(list); // [w, a, -, b, c, d, e] list.removeAt(0); print(list); // [a, -, b, c, d, e] list.removeLast(); print(list); // [a, -, b, c, d] list.removeRange(1, 2); print(list); // [a, b, c, d] /*更新*/ list[0] = 'update'; print(list); // [update, b, c, d] list.replaceRange(1, 3, ['update1', 'update2']); print(list); // [update, update1, update2, d] /*遍利*/ list.forEach((item) { print(item); }); 与javascript对比，增、删的方式有一些小变化。 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/han-shu-de-ding-yi.html":{"url":"setup/han-shu-de-ding-yi.html","title":"函数的定义","keywords":"","body":"函数的定义 声明方式需要用void，有返回的必须用返回值的类型声明 // 无返回结果的函数 void fn(String msg) { print(msg); } // 返回字符串 String fn() { return 'Hello, World!'; } 函数分必传参数与可选参数: 两种定义形式 //可选位置参数 //a: 必传参数 //b: 可选参数 String fn(String a, [b]) { return a + b; } fn('Hello, ', 'World!') //Hello, World! //可选名称参数 String fn({String msg}) { return msg; } fn(msg: 'Hello, World!'); //Hello, World! Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/lei-de-ding-yi.html":{"url":"setup/lei-de-ding-yi.html","title":"类的定义","keywords":"","body":"类的定义 如何定义一个类及私有方法、属性的定义 class MyClass { // 构建函数 // 字段是类中声明的任何变量，字段表示与对象有关的数据。 // 函数表示对象的方法。 //允许程序初始化和检索类字段的值,默认的getter/setter与每个类相关联。 //但是可以通过显式定义setter/getter来覆盖默认值 } 例如： void main() { MyClass myClass = new MyClass( count: 3 ); myClass.chageCount('add'); print(myClass.currCount); // 4 myClass.chageCount('add'); print(myClass.currCount); // 0 myClass.chageCount('add'); print(myClass.currCount); // 1 myClass ..chageCount('add') ..chageCount('add'); //联级运算符 print(myClass.currCount); // 3 } class MyClass { //num currCount = 0; //私有变量(实例化中无法访问) num _count; void set currCount(num count) { if(count>= 5) { this._count = 0; } else { this._count = count; } } num get currCount { return _count; } //构建函数 MyClass({count}){ currCount = count; } //类的方法 void chageCount(String type) { switch(type) { case 'add': currCount++; break; case 'remove': currCount--; break; } } } 关系连接 extends: 类的继承与方法重写 void main() { Child c = new Child(); c.m1(12); } class Parent { void m1(int a){ print(\"value of a ${a}\");} } class Child extends Parent { @override void m1(int b) { print(\"value of b ${b}\"); } } with: 组合多个抽象类或普通类，并结合mixin & on关链字限制用于哪个子类的用法: /*抽象类(抽象类不能于用实例化): 人*/ abstract class Person { void setState(fn) { fn(); report(); } void report() { } } /*mixin on关键字的用法：限定了 DrawFunc 这种能力只能够用在 Person 字类上，并在 DrawFunc 中可以访问 Person 的内容*/ mixin DrawFunc on Person { num age = 22; void draw() { setState(() { age = age + 5; }); } } /*mixin on关键字的用法：限定了 SingFunc 这种能力只能够用在 DrawFunc 字类上，并在 SingFunc 中可以访问 DrawFunc 的内容*/ mixin SingFunc on DrawFunc { void sing() { setState(() { age = age + 1; }); } } /*继承Person、DrawFunc、SingFunc*/ class Teacher extends Person with DrawFunc, SingFunc { String workType = '毕业时年龄：'; //教书 void teach() { setState(() { age = age + 3; }); } @override void report() { print('${workType}workingHours=$age'); } //初始化: Teacher做过画画、喝歌、教书等工作 void initState() { report(); workType = '画画后年龄：'; draw(); workType = '喝歌后年龄：'; sing(); workType = '教书后年龄：'; teach(); } } main() { Teacher teacher = Teacher(); Teacher().initState(); } /* 输出内容 */ // 毕业时年龄：workingHours=22 // 画画后年龄：workingHours=27 // 喝歌后年龄：workingHours=28 // 教书后年龄：workingHours=31 implements: 限制被装饰子类必须包含装饰类的所有属性和方法 class A { void getA() { print('A-getA'); } void getB() { print('A-getB'); } } /*B类必须包含A类的所有方法和属性*/ class B implements A { getA() { print('B-getA'); } getB() { print('B-getB'); } getC() { print('B-getC'); } } 类的总结： 分为普通类与抽象类，其实抽象类不能用于实例化 分为普通类与抽象类，其实抽象类不能用于实例化 子类关联其它普通类或抽象类，可以通过extends、with、implements关链字做关联操作 这些关联在一起的类，它们碰到名字相同的方法或属性，优先级为（前面的将复盖后面）： 子类 > with(with后面的 > 前面的) > extends；（关联的implements类的方法一定不会调用）。 extends 用于继承普通类或抽象类可见的方法和属性（不能继承私有方法） with是把多个普通类集合到当前子类 mixin：定义了抽象类, 与abstract类似，但它可以与on关键字组合起来一块用，限制mixin只能在那个类的子类上使用，而mixin可以调用那个类的方法。 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"setup/ru-he-ding-yi-yi-ge-lei-ji-si-you-fang-fa-3001-shu-xing-de-ding-yi.html":{"url":"setup/ru-he-ding-yi-yi-ge-lei-ji-si-you-fang-fa-3001-shu-xing-de-ding-yi.html","title":"JSON的转换","keywords":"","body":"JSON的转换 import 'dart:convert' as convert; List list = [{'a': 1}]; String listString = convert.jsonEncode(list); print(listString); // [{\"a\":1}] String类型 String aaString = '[{\"a\": 1}]'; List aa = convert.jsonDecode(aaString); print(aa); //[{a: 1}] List类型 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men.html":{"url":"ru-men.html","title":"Flutter入门","keywords":"","body":"Gitbook Editor使用说明 一、先用git工具把项目拉下来（只须操作一次） 二、在Gitbook Editor中导入项目：打开Gitbook Editor，按照下图操作 三、如何编辑并把修改的内容同步到Gitlab上 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/huan-jing-an-zhuang.html":{"url":"ru-men/huan-jing-an-zhuang.html","title":"环境安装","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/chuang-jian-di-yi-ge-flutter.html":{"url":"ru-men/chuang-jian-di-yi-ge-flutter.html","title":"创建第一个Flutter","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/huan-jing-an-zhuang-ji-diao-shi.html":{"url":"ru-men/huan-jing-an-zhuang-ji-diao-shi.html","title":"调试及发布","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/mo-ni-qi-shang-diao-shi.html":{"url":"ru-men/mo-ni-qi-shang-diao-shi.html","title":"调试-模拟器上","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/diao-8bd5-zhen-ji.html":{"url":"ru-men/diao-8bd5-zhen-ji.html","title":"调试-真机","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/diao-8bd5-web-liu-lan-qi.html":{"url":"ru-men/diao-8bd5-web-liu-lan-qi.html","title":"调试-web浏览器","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/fa-5e03-ios.html":{"url":"ru-men/fa-5e03-ios.html","title":"发布-ios","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/fa-5e03-an.html":{"url":"ru-men/fa-5e03-an.html","title":"发布-An","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/fa-bu-web.html":{"url":"ru-men/fa-bu-web.html","title":"发布web","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/flutteryuan-jian.html":{"url":"ru-men/flutteryuan-jian.html","title":"Flutter UI","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/flutteryuan-jian/ye-ye-layout-yuan-jian.html":{"url":"ru-men/flutteryuan-jian/ye-ye-layout-yuan-jian.html","title":"页面layout Widget","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/flutter-kai-fa.html":{"url":"ru-men/flutter-kai-fa.html","title":"Flutter 开发","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"ru-men/flutter-kai-fa/flutter-sheng-ming-zhou-qi.html":{"url":"ru-men/flutter-kai-fa/flutter-sheng-ming-zhou-qi.html","title":"Flutter 生命周期","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"zzz.html":{"url":"zzz.html","title":"Flutter实战","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"zzz/test1.html":{"url":"zzz/test1.html","title":"测试文档 1","keywords":"","body":"目录有下级层级时 有层级的目录，用户触发点击时，只可展开、收起下级目录，所以需要注意：有下级层级的目录，不要编辑页面内容。 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"zzz/test2.html":{"url":"zzz/test2.html","title":"测试文档目录B","keywords":"","body":"Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "},"zzz/test2/test21.html":{"url":"zzz/test2/test21.html","title":"测试文档2","keywords":"","body":"test 21 Copyright ©️ 学习笔记 all right reserved，powered by Gitbook该文件修订时间： 2020-01-10 09:58:08 "}}